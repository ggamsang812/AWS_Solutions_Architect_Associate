12/19/2023
    Lesson 1
        - Object based storage service via API
        **S3 scope is global because the URLs that we use to access S3 with are global, but your data is always stored within a single region unless you configure it otherwise
    
    Lesson 2 - Amazon S3 Overview
        - Accessing objects in a bucket by HTTP protocol is used with REST API(GET, PUT, POST, SELECT, DELETE)
        - S3 is a univeral namespace so bucket names must be unique globally => we use url to access S3, therefore the name must be unique
        - bucket is within a Region
        - **best practice to create buckets in regions that are physically close to users to reduce latency
        - no hierarchy for objects within a bucket => just namespace => kind of make it look like it has a structure with folders 
        - Object name is the Key; data is the Value
        - S3 is a pulic service; not within VPC 
        - 2 ways to access S3 from instance
            1) Have Internet Gateway and access S3 through internet
            2) Set up S3 Gateway Endpoint => EC2 instances connect using private address => Private Connection
    
    Lesson 3 - Amazon S3 Storage Classes
        - Durability - protection against: data loss, data corruption
            => S3 offers 11 9s durability => S3 will never lose your data
        - Availability - the amount of time the data is available to you => expressed as a percent of time per year
        - IA(infrequently access)
    
    Lesson - IAM Policies, Bucket Policies, and ACLs
        - IAM Policies are identity-based policies => attached to IAM users, groups, or roles
            => Use this if you have numerous S3 buckets each with different permissions requirements 
            => prefer to keep access control policies in the IAM environment
            => You need to control access to AWS services other than S3
        - Specify what actions are allowed on what AWS resources
            => written in JSON => Principal element is not required in the policy => if you see JSON policy without Principal element, then it means it could be an IAM policy that's used for S3 rather than bucket policy
        - Bucket Policies are resource-based policies => attached directly to the S3 buckets
            => JSON with Principal, Action, Resource field 
            => simple way to grant cross-account access to your S3 environment, without using IAM roles
            => IAM policies are reaching the size limits
            => prefer to keep access control policies in the S3
        - S3 ACLs is really a legacy access control mechanism that predates IAM
            => AWS recommends using S3 bucket policies or IAM policies 
            => Can be attached to the bucket or directly to an object => Have limited options for grantees and permissions
        **explicit deny in any policy will override explicit allow 

    Lesson - S3 Versioning, Replication and Lifecycle Rules
        Benefits: 
        - Keeping multiple variants of an object in the same bucket
        - To preserve, retrieve and restore every version of every object stored in S3
        - enable you to recover objects from accidental deletion or overwrite 
        - Cross-Region Replication(CRR); Same-Region Replication(SRR)
            => Regions and Accounts, so you can also have source account and destination account 
            => need to have versioning enabled
        - S3 Lifecycle Management
            1) Transition actions - Define when objects transition to another storage class
            2) Expiration actions - Define when objects expire (deleted by S3)        
        - With versioning on, when you delet the object, the "delete marker" will be marked under object type
            => if you delete the delete marker, it will restore the file
        
    Lesson - MFA with Amazon S3
        2 Use Case
        - MFA Delete
            1) Changing the versioning state of a bucket
            2) Permanently deleting an object version
        - The second factor is a token generated by a hardware device or software program like Google Authenticator
        - Requires versioning to be enabled on the bucket by Bucket owners, AWS account that created the bucket or Authorized IAM users
        - MFA Delete can be enabled by Bucket owner only 

        -Protected API Access
            => enforce another authentication factor when accessing AWS resources(not just S3)
    
    Lesson Amazon S3 Encryption
        1) Server-side encryption with S3 managed keys(SSE-S3)
            => Encryption / decryption takes place in AWS S3 as the object is written to the disk using TLS
        2) Server-side encryption with AWS KMS managed keys(SSE-KMS)
            => Encryption / decryption taken place in S3
        3) Server-side encryption with client provided keys(SSE-C)
            => Encryption / decryption taken place in S3 BUT Keys are managed in client, not AWS 
        4) Client-side encryption
            => Client managed keys / you can use a KMS Key 
            => Encryption / decryption taken place in client side via application performing it
            => AWS has no way to encryption / decryption
        - Encryption configured as default using SSE-S3
        - Amazon S3 Batch Operations to encrypt existing unencrypted objects
            => can also use CopyObject API operation or copy-object AWS CLI command 
        - Can enforce encryption with bucket policy 
            => In the bucket policy, if we enforce KMS keys, we will get error if we just upload an object since the default is SSE-S3
    
    Lesson - S3 Event Notifications
        - Sends notifications when events happen in buckets
            => To SNS topics, SQS queues and AWS Lambda
        - useful for event driven architecture 

    Lesson - S3 Presigned URLs
        - method of allowing access to users/specific object for a limited period of time
            => some people just need to see the object for a period of time but doesn't have AWS account
        - use CLI to generate presigned URL with duration of the URL and share the generate URL

    